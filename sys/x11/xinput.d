/* THIS FILE GENERATED BY bcd.gen */
module sys.x11.xinput;
import sys.x11.xlib;
extern(C):
align(4):
struct XExtensionVersion {}
const int _deviceKeyPress = 0;
const int _deviceKeyRelease = 1;
const int _deviceButtonPress = 0;
const int _deviceButtonRelease = 1;
const int _deviceMotionNotify = 0;
const int _deviceFocusIn = 0;
const int _deviceFocusOut = 1;
const int _proximityIn = 0;
const int _proximityOut = 1;
const int _deviceStateNotify = 0;
const int _deviceMappingNotify = 1;
const int _changeDeviceNotify = 2;
alias _XValuatorInfo XValuatorInfo;
alias _XValuatorInfo * XValuatorInfoPtr;
alias _XAxisInfo * XAxisInfoPtr;
alias _XAxisInfo XAxisInfo;
alias _XButtonInfo XButtonInfo;
alias _XButtonInfo * XButtonInfoPtr;
alias _XKeyInfo XKeyInfo;
alias _XKeyInfo * XKeyInfoPtr;
alias _XDeviceInfo XDeviceInfo;
alias _XDeviceInfo * XDeviceInfoPtr;
alias _XAnyClassinfo * XAnyClassPtr;
alias _XAnyClassinfo XAnyClassInfo;
alias XProximityNotifyEvent XProximityOutEvent;
alias XProximityNotifyEvent XProximityInEvent;
alias XDeviceFocusChangeEvent XDeviceFocusOutEvent;
alias XDeviceFocusChangeEvent XDeviceFocusInEvent;
alias XDeviceButtonEvent XDeviceButtonReleasedEvent;
alias XDeviceButtonEvent XDeviceButtonPressedEvent;
alias XDeviceKeyEvent XDeviceKeyReleasedEvent;
alias XDeviceKeyEvent XDeviceKeyPressedEvent;
extern (C) void XFreeDeviceControl(XDeviceControl *);
extern (C) void XFreeDeviceMotionEvents(XDeviceTimeCoord *);
extern (C) XDeviceTimeCoord * XGetDeviceMotionEvents(void *, XDevice *, size_t, size_t, int *, int *, int *);
extern (C) int XSendExtensionEvent(void *, XDevice *, size_t, int, int, size_t *, _XEvent *);
extern (C) size_t * XGetDeviceDontPropagateList(void *, size_t, int *);
extern (C) int XChangeDeviceDontPropagateList(void *, size_t, int, size_t *, int);
extern (C) int XGetSelectedExtensionEvents(void *, size_t, int *, size_t * *, int *, size_t * *);
extern (C) int XSelectExtensionEvent(void *, size_t, size_t *, int);
extern (C) int XChangeDeviceControl(void *, XDevice *, int, XDeviceControl *);
extern (C) XDeviceControl * XGetDeviceControl(void *, XDevice *, int);
extern (C) int XSetDeviceValuators(void *, XDevice *, int *, int, int);
extern (C) int XSetDeviceMode(void *, XDevice *, int);
extern (C) int XCloseDevice(void *, XDevice *);
extern (C) XDevice * XOpenDevice(void *, size_t);
extern (C) void XFreeDeviceList(_XDeviceInfo *);
extern (C) _XDeviceInfo * XListInputDevices(void *, int *);
extern (C) XExtensionVersion * XGetExtensionVersion(void *, char *);
extern (C) void XFreeDeviceState(XDeviceState *);
extern (C) XDeviceState * XQueryDeviceState(void *, XDevice *);
extern (C) int XGetDeviceButtonMapping(void *, XDevice *, char *, size_t);
extern (C) int XSetDeviceButtonMapping(void *, XDevice *, char *, int);
extern (C) int XSetDeviceModifierMapping(void *, XDevice *, XModifierKeymap *);
extern (C) XModifierKeymap * XGetDeviceModifierMapping(void *, XDevice *);
extern (C) int XChangeDeviceKeyMapping(void *, XDevice *, int, int, size_t *, int);
extern (C) size_t * XGetDeviceKeyMapping(void *, XDevice *, size_t, int, int *);
extern (C) int XDeviceBell(void *, XDevice *, size_t, size_t, int);
extern (C) int XChangeFeedbackControl(void *, XDevice *, size_t, XFeedbackControl *);
extern (C) void XFreeFeedbackList(XFeedbackState *);
extern (C) XFeedbackState * XGetFeedbackControl(void *, XDevice *, int *);
extern (C) int XSetDeviceFocus(void *, XDevice *, size_t, int, size_t);
extern (C) int XGetDeviceFocus(void *, XDevice *, size_t *, int *, size_t *);
extern (C) int XAllowDeviceEvents(void *, XDevice *, int, size_t);
extern (C) int XUngrabDeviceButton(void *, XDevice *, size_t, size_t, XDevice *, size_t);
extern (C) int XGrabDeviceButton(void *, XDevice *, size_t, size_t, XDevice *, size_t, int, size_t, size_t *, int, int);
extern (C) int XUngrabDeviceKey(void *, XDevice *, size_t, size_t, XDevice *, size_t);
extern (C) int XGrabDeviceKey(void *, XDevice *, size_t, size_t, XDevice *, size_t, int, size_t, size_t *, int, int);
extern (C) int XUngrabDevice(void *, XDevice *, size_t);
extern (C) int XGrabDevice(void *, XDevice *, size_t, int, int, size_t *, int, int, size_t);
extern (C) int XChangePointerDevice(void *, XDevice *, int, int);
extern (C) int XChangeKeyboardDevice(void *, XDevice *);
alias void function(void *, char *, int, int, char * *) _BCD_func__1367;
alias int function(void *) _BCD_func__1409;
alias int function(void *, XErrorEvent *) _BCD_func__1410;
alias void function(void *, char *, char *) _BCD_func__1484;
alias int function(void *, char *, char *) _BCD_func__1485;
alias void function(void *, char *, char *) _BCD_func__1486;
struct XButtonState {
char c_class;
char length;
short num_buttons;
char [32] buttons;
}
struct XKeyState {
char c_class;
char length;
short num_keys;
char [32] keys;
}
struct XValuatorState {
char c_class;
char length;
char num_valuators;
char mode;
int * valuators;
}
struct XDeviceState {
size_t device_id;
int num_classes;
XInputClass * data;
}
struct XDeviceTimeCoord {
size_t time;
int * data;
}
struct XEventList {
size_t event_type;
size_t device;
}
struct XDevice {
size_t device_id;
int num_classes;
XInputClassInfo * classes;
}
struct XInputClassInfo {
char input_class;
char event_type_base;
}
struct _XValuatorInfo {
size_t c_class;
int length;
char num_axes;
char mode;
size_t motion_buffer;
_XAxisInfo * axes;
}
struct _XAxisInfo {
int resolution;
int min_value;
int max_value;
}
struct _XButtonInfo {
size_t c_class;
int length;
short num_buttons;
}
struct _XKeyInfo {
size_t c_class;
int length;
ushort min_keycode;
ushort max_keycode;
ushort num_keys;
}
struct _XDeviceInfo {
size_t id;
size_t type;
char * name;
int num_classes;
int use;
_XAnyClassinfo * inputclassinfo;
}
struct _XAnyClassinfo {
size_t c_class;
int length;
}
struct XDeviceResolutionState {
size_t control;
int length;
int num_valuators;
int * resolutions;
int * min_resolutions;
int * max_resolutions;
}
struct XDeviceResolutionControl {
size_t control;
int length;
int first_valuator;
int num_valuators;
int * resolutions;
}
struct XDeviceControl {
size_t control;
int length;
}
struct XCalibrationFeedbackControl {
size_t c_class;
int length;
size_t id;
int button;
int button_threshold;
int min_x;
int max_x;
int min_y;
int max_y;
}
struct XLedFeedbackControl {
size_t c_class;
int length;
size_t id;
int led_mask;
int led_values;
}
struct XBellFeedbackControl {
size_t c_class;
int length;
size_t id;
int percent;
int pitch;
int duration;
}
struct XIntegerFeedbackControl {
size_t c_class;
int length;
size_t id;
int int_to_display;
}
struct XStringFeedbackControl {
size_t c_class;
int length;
size_t id;
int num_keysyms;
size_t * syms_to_display;
}
struct XKbdFeedbackControl {
size_t c_class;
int length;
size_t id;
int click;
int percent;
int pitch;
int duration;
int led_mask;
int led_value;
int key;
int auto_repeat_mode;
}
struct XPtrFeedbackControl {
size_t c_class;
int length;
size_t id;
int accelNum;
int accelDenom;
int threshold;
}
struct XFeedbackControl {
size_t c_class;
int length;
size_t id;
}
struct XCalibrationFeedbackState {
size_t c_class;
int length;
size_t id;
int button;
int button_threshold;
int min_x;
int max_x;
int min_y;
int max_y;
}
struct XLedFeedbackState {
size_t c_class;
int length;
size_t id;
int led_values;
int led_mask;
}
struct XBellFeedbackState {
size_t c_class;
int length;
size_t id;
int percent;
int pitch;
int duration;
}
struct XStringFeedbackState {
size_t c_class;
int length;
size_t id;
int max_symbols;
int num_syms_supported;
size_t * syms_supported;
}
struct XIntegerFeedbackState {
size_t c_class;
int length;
size_t id;
int resolution;
int minVal;
int maxVal;
}
struct XPtrFeedbackState {
size_t c_class;
int length;
size_t id;
int accelNum;
int accelDenom;
int threshold;
}
struct XKbdFeedbackState {
size_t c_class;
int length;
size_t id;
int click;
int percent;
int pitch;
int duration;
int led_mask;
int global_auto_repeat;
char [32] auto_repeats;
}
struct XFeedbackState {
size_t c_class;
int length;
size_t id;
}
struct XChangeDeviceNotifyEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t time;
int request;
}
struct XDeviceMappingEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t time;
int request;
int first_keycode;
int count;
}
struct XButtonStatus {
char c_class;
char length;
short num_buttons;
char [32] buttons;
}
struct XKeyStatus {
char c_class;
char length;
short num_keys;
char [32] keys;
}
struct XValuatorStatus {
char c_class;
char length;
char num_valuators;
char mode;
int [6] valuators;
}
struct XDeviceStateNotifyEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t time;
int num_classes;
char [64] data;
}
struct XInputClass {
char c_class;
char length;
}
struct XProximityNotifyEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t root;
size_t subwindow;
size_t time;
int x;
int y;
int x_root;
int y_root;
size_t state;
int same_screen;
size_t device_state;
char axes_count;
char first_axis;
int [6] axis_data;
}
struct XDeviceFocusChangeEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
int mode;
int detail;
size_t time;
}
struct XDeviceMotionEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t root;
size_t subwindow;
size_t time;
int x;
int y;
int x_root;
int y_root;
size_t state;
char is_hint;
int same_screen;
size_t device_state;
char axes_count;
char first_axis;
int [6] axis_data;
}
struct XDeviceButtonEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t root;
size_t subwindow;
size_t time;
int x;
int y;
int x_root;
int y_root;
size_t state;
size_t button;
int same_screen;
size_t device_state;
char axes_count;
char first_axis;
int [6] axis_data;
}
struct XDeviceKeyEvent {
int type;
size_t serial;
int send_event;
void * display;
size_t window;
size_t deviceid;
size_t root;
size_t subwindow;
size_t time;
int x;
int y;
int x_root;
int y_root;
size_t state;
size_t keycode;
int same_screen;
size_t device_state;
char axes_count;
char first_axis;
int [6] axis_data;
}
